Given a singly linked list: A0→A1→...→An-2→An-1, reorder it to: A0→An-1→A1→An-2→A2→An-3→...
For example: Given 1->2->3->4->5 its reorder is 1->5->2->4->3.

Note: It is recommended do this in-place without altering the node's values.

Example 1:

Input:
LinkedList: 1->2->3
Output: 1 3 2
Explanation:
Here n=3, so the correct
order is A0→A2→A1


class ListNode:
    def __init__(self, value=0, next=None):
        self.value = value
        self.next = next

def reorderList(head):
    if not head or not head.next:
        return head

    # Step 1: Find the middle of the linked list.
    slow, fast = head, head

    while fast.next and fast.next.next:
        slow = slow.next
        fast = fast.next.next

    middle = slow.next
    slow.next = None  # Break the linked list into two halves.

    # Step 2: Reverse the second half.
    prev = None
    current = middle

    while current:
        temp = current.next
        current.next = prev
        prev = current
        current = temp

    # Step 3: Merge the two halves.
    first, second = head, prev

    while second:
        next_first, next_second = first.next, second.next
        first.next = second
        second.next = next_first
        first = next_first
        second = next_second

    return head

# Utility function to print the linked list.
def printLinkedList(head):
    current = head
    while current:
        print(current.value, end=" -> ")
        current = current.next
    print("None")

# Example usage:
head = ListNode(1)
head.next = ListNode(2)
head.next.next = ListNode(3)
head.next.next.next = ListNode(4)
head.next.next.next.next = ListNode(5)

reordered_head = reorderList(head)
printLinkedList(reordered_head)
